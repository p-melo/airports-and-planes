/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frame;

import classes.Aeroporto;
import classes.Aviao;
import edu.princeton.cs.algs4.RedBlackBST;
import graphs.AirlineConnection;
import graphs.DijkstraShortestPath;
import graphs.EdgeWeightedSymbolDigraph;
import java.util.ArrayList;
import javax.swing.JList;
import javax.swing.JTextField;

/**
 *
 * @author Modusaleatorios
 */
public class GraphShortestPathPanel extends javax.swing.JPanel
{

    /**
     * Creates new form GraphShortestPathPanel
     */
    public GraphShortestPathPanel()
    {
        initComponents();
        
        this.cbx_StartAirport.removeAllItems();
        this.cbx_EndAirport.removeAllItems();
        this.lst_ShortestPathConnections.removeAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroup1 = new javax.swing.ButtonGroup();
        lbl_StartAirport = new javax.swing.JLabel();
        cbx_StartAirport = new javax.swing.JComboBox<>();
        lbl_EndAirport = new javax.swing.JLabel();
        cbx_EndAirport = new javax.swing.JComboBox<>();
        ShortestPathPanel = new javax.swing.JPanel();
        txt_ShortestPath_Total = new javax.swing.JTextField();
        lbl_ShortestPath_Total = new javax.swing.JLabel();
        ScrollPane_ShortestPath_List = new javax.swing.JScrollPane();
        lst_ShortestPathConnections = new javax.swing.JList<>();
        rdb_ShortestPath = new javax.swing.JRadioButton();
        DirectPathPanel = new javax.swing.JPanel();
        txt_DirectPath_Total = new javax.swing.JTextField();
        lbl_DirectPath_Total = new javax.swing.JLabel();
        ScrollPane_DirectPath_List = new javax.swing.JScrollPane();
        lst_DirectPathConnections = new javax.swing.JList<>();
        rdb_DirectPath = new javax.swing.JRadioButton();
        EconomicPathPanel = new javax.swing.JPanel();
        txt_EconomicPath_Total = new javax.swing.JTextField();
        lbl_EconomicPath_Total = new javax.swing.JLabel();
        ScrollPane_EconomicPath_List = new javax.swing.JScrollPane();
        lst_EconomicPathConnections = new javax.swing.JList<>();
        lbl_EconomicPath_Plane = new javax.swing.JLabel();
        txt_EconomicPath_Plane = new javax.swing.JTextField();
        rdb_EconomicPath = new javax.swing.JRadioButton();
        QuickestPathPanel = new javax.swing.JPanel();
        lbl_QuickestPath_Total = new javax.swing.JLabel();
        txt_QuickestPath_Total = new javax.swing.JTextField();
        ScrollPane_QuickestPath_List = new javax.swing.JScrollPane();
        lst_QuickestPathConnections = new javax.swing.JList<>();
        lbl_QuickestPath_Plane = new javax.swing.JLabel();
        txt_QuickestPath_Plane = new javax.swing.JTextField();
        rdb_QuickestPath = new javax.swing.JRadioButton();

        setBackground(new java.awt.Color(224, 239, 255));
        setPreferredSize(new java.awt.Dimension(942, 344));

        lbl_StartAirport.setText("START AT");

        cbx_StartAirport.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbx_StartAirport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbx_StartAirportActionPerformed(evt);
            }
        });

        lbl_EndAirport.setText("END AT");

        cbx_EndAirport.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbx_EndAirport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbx_EndAirportActionPerformed(evt);
            }
        });

        ShortestPathPanel.setBackground(new java.awt.Color(224, 239, 255));
        ShortestPathPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("SHORTEST PATH"));
        ShortestPathPanel.setPreferredSize(new java.awt.Dimension(480, 133));

        txt_ShortestPath_Total.setEditable(false);
        txt_ShortestPath_Total.setBackground(new java.awt.Color(203, 229, 255));
        txt_ShortestPath_Total.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        lbl_ShortestPath_Total.setText("TOTAL DISTANCE");

        lst_ShortestPathConnections.setBackground(new java.awt.Color(219, 237, 255));
        lst_ShortestPathConnections.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        lst_ShortestPathConnections.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ScrollPane_ShortestPath_List.setViewportView(lst_ShortestPathConnections);

        rdb_ShortestPath.setBackground(new java.awt.Color(224, 239, 255));
        buttonGroup1.add(rdb_ShortestPath);
        rdb_ShortestPath.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rdb_ShortestPathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ShortestPathPanelLayout = new javax.swing.GroupLayout(ShortestPathPanel);
        ShortestPathPanel.setLayout(ShortestPathPanelLayout);
        ShortestPathPanelLayout.setHorizontalGroup(
            ShortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShortestPathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_ShortestPath_Total, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbl_ShortestPath_Total)
                .addGap(16, 16, 16)
                .addComponent(rdb_ShortestPath)
                .addGap(18, 18, 18)
                .addComponent(ScrollPane_ShortestPath_List, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );
        ShortestPathPanelLayout.setVerticalGroup(
            ShortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShortestPathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ShortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShortestPathPanelLayout.createSequentialGroup()
                        .addComponent(rdb_ShortestPath)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(ShortestPathPanelLayout.createSequentialGroup()
                        .addComponent(ScrollPane_ShortestPath_List, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(ShortestPathPanelLayout.createSequentialGroup()
                        .addGroup(ShortestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_ShortestPath_Total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_ShortestPath_Total))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        DirectPathPanel.setBackground(new java.awt.Color(224, 239, 255));
        DirectPathPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("DIRECT PATH"));
        DirectPathPanel.setPreferredSize(new java.awt.Dimension(480, 133));

        txt_DirectPath_Total.setEditable(false);
        txt_DirectPath_Total.setBackground(new java.awt.Color(203, 229, 255));

        lbl_DirectPath_Total.setText("TOTAL CONNECTS");

        lst_DirectPathConnections.setBackground(new java.awt.Color(219, 237, 255));
        lst_DirectPathConnections.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        lst_DirectPathConnections.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ScrollPane_DirectPath_List.setViewportView(lst_DirectPathConnections);

        rdb_DirectPath.setBackground(new java.awt.Color(224, 239, 255));
        buttonGroup1.add(rdb_DirectPath);
        rdb_DirectPath.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rdb_DirectPathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DirectPathPanelLayout = new javax.swing.GroupLayout(DirectPathPanel);
        DirectPathPanel.setLayout(DirectPathPanelLayout);
        DirectPathPanelLayout.setHorizontalGroup(
            DirectPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DirectPathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txt_DirectPath_Total, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbl_DirectPath_Total)
                .addGap(12, 12, 12)
                .addComponent(rdb_DirectPath)
                .addGap(18, 18, 18)
                .addComponent(ScrollPane_DirectPath_List, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );
        DirectPathPanelLayout.setVerticalGroup(
            DirectPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DirectPathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DirectPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPane_DirectPath_List, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(DirectPathPanelLayout.createSequentialGroup()
                        .addGroup(DirectPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdb_DirectPath)
                            .addGroup(DirectPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txt_DirectPath_Total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbl_DirectPath_Total)))
                        .addGap(0, 67, Short.MAX_VALUE)))
                .addContainerGap())
        );

        EconomicPathPanel.setBackground(new java.awt.Color(224, 239, 255));
        EconomicPathPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("ECONOMIC PATH"));
        EconomicPathPanel.setPreferredSize(new java.awt.Dimension(480, 133));

        txt_EconomicPath_Total.setEditable(false);
        txt_EconomicPath_Total.setBackground(new java.awt.Color(203, 229, 255));

        lbl_EconomicPath_Total.setText("TOTAL FUEL");

        lst_EconomicPathConnections.setBackground(new java.awt.Color(219, 237, 255));
        lst_EconomicPathConnections.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        lst_EconomicPathConnections.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ScrollPane_EconomicPath_List.setViewportView(lst_EconomicPathConnections);

        lbl_EconomicPath_Plane.setText("AIRPLANE");

        txt_EconomicPath_Plane.setEditable(false);
        txt_EconomicPath_Plane.setBackground(new java.awt.Color(219, 237, 255));

        rdb_EconomicPath.setBackground(new java.awt.Color(224, 239, 255));
        buttonGroup1.add(rdb_EconomicPath);
        rdb_EconomicPath.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rdb_EconomicPathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EconomicPathPanelLayout = new javax.swing.GroupLayout(EconomicPathPanel);
        EconomicPathPanel.setLayout(EconomicPathPanelLayout);
        EconomicPathPanelLayout.setHorizontalGroup(
            EconomicPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EconomicPathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EconomicPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_EconomicPath_Plane, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(EconomicPathPanelLayout.createSequentialGroup()
                        .addGroup(EconomicPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_EconomicPath_Total, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_EconomicPath_Plane))
                        .addGap(18, 18, 18)
                        .addComponent(lbl_EconomicPath_Total)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rdb_EconomicPath)))
                .addGap(18, 18, 18)
                .addComponent(ScrollPane_EconomicPath_List, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );
        EconomicPathPanelLayout.setVerticalGroup(
            EconomicPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EconomicPathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EconomicPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EconomicPathPanelLayout.createSequentialGroup()
                        .addGroup(EconomicPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(EconomicPathPanelLayout.createSequentialGroup()
                                .addGroup(EconomicPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txt_EconomicPath_Total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_EconomicPath_Total))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                .addComponent(lbl_EconomicPath_Plane))
                            .addGroup(EconomicPathPanelLayout.createSequentialGroup()
                                .addComponent(rdb_EconomicPath)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_EconomicPath_Plane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ScrollPane_EconomicPath_List, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        QuickestPathPanel.setBackground(new java.awt.Color(224, 239, 255));
        QuickestPathPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("QUICKEST PATH"));
        QuickestPathPanel.setPreferredSize(new java.awt.Dimension(480, 133));

        lbl_QuickestPath_Total.setText("TOTAL TIME");

        txt_QuickestPath_Total.setEditable(false);
        txt_QuickestPath_Total.setBackground(new java.awt.Color(203, 229, 255));

        lst_QuickestPathConnections.setBackground(new java.awt.Color(219, 237, 255));
        lst_QuickestPathConnections.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        lst_QuickestPathConnections.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ScrollPane_QuickestPath_List.setViewportView(lst_QuickestPathConnections);

        lbl_QuickestPath_Plane.setText("AIRPLANE");

        txt_QuickestPath_Plane.setEditable(false);
        txt_QuickestPath_Plane.setBackground(new java.awt.Color(219, 237, 255));

        rdb_QuickestPath.setBackground(new java.awt.Color(224, 239, 255));
        buttonGroup1.add(rdb_QuickestPath);
        rdb_QuickestPath.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rdb_QuickestPathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout QuickestPathPanelLayout = new javax.swing.GroupLayout(QuickestPathPanel);
        QuickestPathPanel.setLayout(QuickestPathPanelLayout);
        QuickestPathPanelLayout.setHorizontalGroup(
            QuickestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QuickestPathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(QuickestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_QuickestPath_Plane, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(QuickestPathPanelLayout.createSequentialGroup()
                        .addComponent(txt_QuickestPath_Total, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbl_QuickestPath_Total)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rdb_QuickestPath))
                    .addComponent(lbl_QuickestPath_Plane))
                .addGap(18, 18, 18)
                .addComponent(ScrollPane_QuickestPath_List, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );
        QuickestPathPanelLayout.setVerticalGroup(
            QuickestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QuickestPathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(QuickestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(QuickestPathPanelLayout.createSequentialGroup()
                        .addGroup(QuickestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(QuickestPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txt_QuickestPath_Total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbl_QuickestPath_Total))
                            .addComponent(rdb_QuickestPath))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_QuickestPath_Plane)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_QuickestPath_Plane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ScrollPane_QuickestPath_List, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_StartAirport)
                        .addGap(18, 18, 18)
                        .addComponent(cbx_StartAirport, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                        .addComponent(lbl_EndAirport)
                        .addGap(18, 18, 18)
                        .addComponent(cbx_EndAirport, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EconomicPathPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                            .addComponent(ShortestPathPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(QuickestPathPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                            .addComponent(DirectPathPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbx_StartAirport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_StartAirport)
                    .addComponent(cbx_EndAirport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_EndAirport))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ShortestPathPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DirectPathPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(EconomicPathPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(QuickestPathPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbx_EndAirportActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbx_EndAirportActionPerformed
    {//GEN-HEADEREND:event_cbx_EndAirportActionPerformed
        String startAirport = (String)this.cbx_StartAirport.getSelectedItem();
        String endAirport = (String)this.cbx_EndAirport.getSelectedItem();
        
        if ((startAirport != null) && (endAirport != null))
        {
            setShortestPathConnections();
        }
    }//GEN-LAST:event_cbx_EndAirportActionPerformed

    private void cbx_StartAirportActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbx_StartAirportActionPerformed
    {//GEN-HEADEREND:event_cbx_StartAirportActionPerformed
        String startAirport = (String)this.cbx_StartAirport.getSelectedItem();
        String endAirport = (String)this.cbx_EndAirport.getSelectedItem();
        
        if ((startAirport != null) && (endAirport != null))
        {
            setShortestPathConnections();
        }
        
    }//GEN-LAST:event_cbx_StartAirportActionPerformed

    private void rdb_ShortestPathActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdb_ShortestPathActionPerformed
    {//GEN-HEADEREND:event_rdb_ShortestPathActionPerformed
        redesignEdgeOnMap(SHORTEST);
    }//GEN-LAST:event_rdb_ShortestPathActionPerformed

    private void rdb_DirectPathActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdb_DirectPathActionPerformed
    {//GEN-HEADEREND:event_rdb_DirectPathActionPerformed
        redesignEdgeOnMap(DIRECT);
    }//GEN-LAST:event_rdb_DirectPathActionPerformed

    private void rdb_EconomicPathActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdb_EconomicPathActionPerformed
    {//GEN-HEADEREND:event_rdb_EconomicPathActionPerformed
        redesignEdgeOnMap(ECONOMIC);
    }//GEN-LAST:event_rdb_EconomicPathActionPerformed

    private void rdb_QuickestPathActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdb_QuickestPathActionPerformed
    {//GEN-HEADEREND:event_rdb_QuickestPathActionPerformed
        redesignEdgeOnMap(QUICKEST);
    }//GEN-LAST:event_rdb_QuickestPathActionPerformed

    public void setExtraClasses(EdgeWeightedSymbolDigraph ewsd, RedBlackBST<String, Aeroporto> airportRB, RedBlackBST<String, Aviao> airplaneRB, MapPanel mapanel)
    {
        this.ewSymbolDigraph = ewsd;
        this.AirportRBST = airportRB;
        this.AirplaneRBST = airplaneRB;
        this.mapPanel = mapanel;
        this.cbx_StartAirport.removeAllItems();
        this.cbx_EndAirport.removeAllItems();
        
        setShortestPathBoard();
        this.cbx_StartAirport.setSelectedIndex(0);
        this.cbx_EndAirport.setSelectedIndex(0);
    }
    
    public void setShortestPathBoard()
    {
        this.cbx_StartAirport.removeAllItems();
        this.cbx_EndAirport.removeAllItems();
        
        for (String airportCode : this.AirportRBST.keys())
        {
            this.cbx_StartAirport.addItem(airportCode + " - " + AirportRBST.get(airportCode).getNome());
            this.cbx_EndAirport.addItem(airportCode + " - " + AirportRBST.get(airportCode).getNome());
        }
        
        setShortestPathConnections();
    }
    
    public void setShortestPathConnections()
    {
        int v = selectedItemToIndex((String)this.cbx_StartAirport.getSelectedItem());
        int w = selectedItemToIndex((String)this.cbx_EndAirport.getSelectedItem());
        
        setWeightlessPath_Null(" km", this.txt_ShortestPath_Total, this.lst_ShortestPathConnections, null);
        setWeighlessPathConnections(v, w, SHORTEST, " km", this.txt_ShortestPath_Total, this.lst_ShortestPathConnections, null, null);
        setWeightlessPath_Null(" connection", this.txt_DirectPath_Total, this.lst_DirectPathConnections, null);
        setWeighlessPathConnections(v, w, DIRECT, " connection", this.txt_DirectPath_Total, this.lst_DirectPathConnections, null, null);
        Aviao airplaneEconomic = testWeightlessPathAirplane(v, w, ECONOMIC);
        setWeightlessPath_Null(" lt", this.txt_EconomicPath_Total, this.lst_EconomicPathConnections, this.txt_EconomicPath_Plane);
        if (airplaneEconomic != null)
        {
            setWeighlessPathConnections(v, w, ECONOMIC, " lt", this.txt_EconomicPath_Total, this.lst_EconomicPathConnections, this.txt_EconomicPath_Plane, airplaneEconomic);
        }
        Aviao airplaneQuickest = testWeightlessPathAirplane(v, w, QUICKEST);
        setWeightlessPath_Null("", this.txt_QuickestPath_Total, this.lst_QuickestPathConnections, this.txt_QuickestPath_Plane);
        if (airplaneQuickest != null)
        {
            setWeighlessPathConnections(v, w, QUICKEST, "", this.txt_QuickestPath_Total, this.lst_QuickestPathConnections, this.txt_QuickestPath_Plane, airplaneQuickest);
        }
    }
    
    private int selectedItemToIndex(String selectedItem)
    {
        String itemCode = new String(selectedItem.substring(0, 3));
        return this.ewSymbolDigraph.indexOf(itemCode);
    }
    
    private void setWeightlessPath_Null(String weightExtension, JTextField txt_TotalField, JList<String> lst_ListConnections, JTextField txt_Airplane)
    {
        txt_TotalField.setText("0.0" + weightExtension);
        String[] list0 = new String[0];
        lst_ListConnections.setListData(list0);
        if (txt_Airplane != null)
        {
            txt_Airplane.setText("");
        }
    }
    
    private Aviao testWeightlessPathAirplane(int v, int w, String weightType)
    {
        double bestDistance = Double.POSITIVE_INFINITY;
        Aviao bestAirplane = null;
        Aeroporto startAirport = this.AirportRBST.get(this.ewSymbolDigraph.nameOf(v));
        
        if (!startAirport.getListagemAvioes().isEmpty())
        {
            for (String airplaneCodeIter : startAirport.getListagemAvioes().keys())
            {
                Aviao airplane = startAirport.getMyAviao(airplaneCodeIter);
                DijkstraShortestPath dShortestPath = new DijkstraShortestPath(this.ewSymbolDigraph.getEdgeWeightedDirectedGraph(), airplane, v, weightType);
                if (dShortestPath.hasPathTo(w))
                {
                    if (dShortestPath.getDistTo(w) < bestDistance)
                    {
                        boolean makesAllConnections = true;
                        for (AirlineConnection acIter : dShortestPath.pathTo(w))
                        {
                            if (airplane.getMyModeloAviao().getDistanciaMax() < acIter.getDistanceWeight())
                            {
                                makesAllConnections = false;
                                break;
                            }
                        }
                        if (makesAllConnections)
                        {
                            bestAirplane = airplane;
                        }
                    }
                }
            }
        }
        
        return bestAirplane;
    }
    
    private void setWeighlessPathConnections(int v, int w, String weightType, String weightExtension, JTextField txt_TotalField, JList<String> lst_ListConnections, JTextField txt_Airplane, Aviao airplane)
    {
        switch (weightType)
        {
            case SHORTEST:
                this.listEdges_ShortestPath.clear();
                break;
            case DIRECT:
                this.listEdges_DirectPath.clear();
                break;
            case ECONOMIC:
                this.listEdges_EconomicPath.clear();
                break;
            case QUICKEST:
                this.listEdges_QuickestPath.clear();
                break;
        }
        
        ArrayList<String> auxListData = new ArrayList<>();
        DijkstraShortestPath dShortestPath;
        if (txt_Airplane == null)
        {
            dShortestPath = new DijkstraShortestPath(this.ewSymbolDigraph.getEdgeWeightedDirectedGraph(), this.AirplaneRBST.get(this.AirplaneRBST.select(0)), v, weightType);
        }
        else
        {
            dShortestPath = new DijkstraShortestPath(this.ewSymbolDigraph.getEdgeWeightedDirectedGraph(), airplane, v, weightType);
        }
        
        if (dShortestPath.hasPathTo(w))
        {
            if (weightType.compareTo(SHORTEST) == 0)
            {
                txt_TotalField.setText(String.valueOf(dShortestPath.getDistTo(w)) + weightExtension);
            }
            else if (weightType.compareTo(QUICKEST) == 0)
            {
                int hour = (int)dShortestPath.getDistTo(w);
                int minute = (int)(((dShortestPath.getDistTo(w) * 100) - (hour * 100)) * 0.6);
                if (minute < 10)
                {
                    txt_TotalField.setText(hour + "h0" + minute);
                }
                else
                {
                    txt_TotalField.setText(hour + "h" + minute);
                }
            }
            else
            {
                txt_TotalField.setText(String.valueOf((int)dShortestPath.getDistTo(w)) + weightExtension);
            }
            
            for (AirlineConnection acIter : dShortestPath.pathTo(w))
            {
                int lat1 = (int)AirportRBST.get(ewSymbolDigraph.nameOf(acIter.from())).getMyCidade().getLatitude();
                int long1 = (int)AirportRBST.get(ewSymbolDigraph.nameOf(acIter.from())).getMyCidade().getLongitude();
                int lat2 = (int)AirportRBST.get(ewSymbolDigraph.nameOf(acIter.to())).getMyCidade().getLatitude();
                int long2 = (int)AirportRBST.get(ewSymbolDigraph.nameOf(acIter.to())).getMyCidade().getLongitude();
                int[] edgeCoordinates = {lat1, long1, lat2, long2};
                
                String listLine = ewSymbolDigraph.nameOf(acIter.from()) + " -> " + ewSymbolDigraph.nameOf(acIter.to());
                if (weightType.compareTo(SHORTEST) == 0)
                {
                    this.listEdges_ShortestPath.add(edgeCoordinates);
                    
                    listLine = listLine + " = " + acIter.getDistanceWeight() + weightExtension;
                }
                else if (weightType.compareTo(ECONOMIC) == 0)
                {
                    this.listEdges_EconomicPath.add(edgeCoordinates);
                    
                    double cruiseVelocity2 = airplane.getMyModeloAviao().getVelocidadeCruzeiro();
                    double tailWind = acIter.getWindVelocityWeight();
                    double cruiseAltitude = airplane.getMyModeloAviao().getAltitudeCruzeiro();
                    double edgeAltitude = acIter.getAltitudeWeight();
                    double fuelConsuption = airplane.getMyModeloAviao().mediaDeConsumo();
                    double distance2 = acIter.getDistanceWeight();
                    double weightValue = (fuelConsuption * distance2) + ((-20 * tailWind) * (distance2 / 1000)) + ((((Math.abs(cruiseAltitude - edgeAltitude))/1000) * 200) * (distance2 / cruiseVelocity2));
                    listLine = listLine + " = " + (int)weightValue + weightExtension;
                }
                else if (weightType.compareTo(QUICKEST) == 0)
                {
                    this.listEdges_QuickestPath.add(edgeCoordinates);
                    
                    double distance4 = acIter.getDistanceWeight();
                    double cruiseVelocity4 = airplane.getMyModeloAviao().getVelocidadeCruzeiro();
                    double timeValue = distance4 / cruiseVelocity4;
                    
                    int hour = (int)timeValue;
                    int minute = (int)(((timeValue * 100) - (hour * 100)) * 0.6);
                    if (minute < 10)
                    {
                        listLine = listLine + " = " + hour + "h0" + minute;
                    }
                    else
                    {
                        listLine = listLine + " = " + hour + "h" + minute;
                    }
                }
                else
                {
                    this.listEdges_DirectPath.add(edgeCoordinates);
                }
                auxListData.add(listLine);
                redesignEdgeOnMap(weightType);
            }
            
            String[] listData = new String[auxListData.size()];
            for (int i = 0; i < auxListData.size(); i++)
            {
                listData[i] = auxListData.get(i);
            }
            lst_ListConnections.setListData(listData);
            
            if (txt_Airplane != null)
            {
                txt_Airplane.setText(airplane.getNomeAviao());
            }
        }
    }
    
    private void redesignEdgeOnMap(String weightType)
    {
        this.mapPanel.removeEdgesOnMap();
        if (this.rdb_ShortestPath.isSelected())
        {
            for (int[] lineIter : this.listEdges_ShortestPath)
            {
                this.mapPanel.placeEdgeOnMap(lineIter);
            }
        }
        else if (this.rdb_DirectPath.isSelected())
        {
            for (int[] lineIter : this.listEdges_DirectPath)
            {
                this.mapPanel.placeEdgeOnMap(lineIter);
            }
        }
        else if (this.rdb_EconomicPath.isSelected())
        {
            for (int[] lineIter : this.listEdges_EconomicPath)
            {
                this.mapPanel.placeEdgeOnMap(lineIter);
            }
        }
        else if (this.rdb_QuickestPath.isSelected())
        {
            for (int[] lineIter : this.listEdges_QuickestPath)
            {
                this.mapPanel.placeEdgeOnMap(lineIter);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DirectPathPanel;
    private javax.swing.JPanel EconomicPathPanel;
    private javax.swing.JPanel QuickestPathPanel;
    private javax.swing.JScrollPane ScrollPane_DirectPath_List;
    private javax.swing.JScrollPane ScrollPane_EconomicPath_List;
    private javax.swing.JScrollPane ScrollPane_QuickestPath_List;
    private javax.swing.JScrollPane ScrollPane_ShortestPath_List;
    private javax.swing.JPanel ShortestPathPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbx_EndAirport;
    private javax.swing.JComboBox<String> cbx_StartAirport;
    private javax.swing.JLabel lbl_DirectPath_Total;
    private javax.swing.JLabel lbl_EconomicPath_Plane;
    private javax.swing.JLabel lbl_EconomicPath_Total;
    private javax.swing.JLabel lbl_EndAirport;
    private javax.swing.JLabel lbl_QuickestPath_Plane;
    private javax.swing.JLabel lbl_QuickestPath_Total;
    private javax.swing.JLabel lbl_ShortestPath_Total;
    private javax.swing.JLabel lbl_StartAirport;
    private javax.swing.JList<String> lst_DirectPathConnections;
    private javax.swing.JList<String> lst_EconomicPathConnections;
    private javax.swing.JList<String> lst_QuickestPathConnections;
    private javax.swing.JList<String> lst_ShortestPathConnections;
    private javax.swing.JRadioButton rdb_DirectPath;
    private javax.swing.JRadioButton rdb_EconomicPath;
    private javax.swing.JRadioButton rdb_QuickestPath;
    private javax.swing.JRadioButton rdb_ShortestPath;
    private javax.swing.JTextField txt_DirectPath_Total;
    private javax.swing.JTextField txt_EconomicPath_Plane;
    private javax.swing.JTextField txt_EconomicPath_Total;
    private javax.swing.JTextField txt_QuickestPath_Plane;
    private javax.swing.JTextField txt_QuickestPath_Total;
    private javax.swing.JTextField txt_ShortestPath_Total;
    // End of variables declaration//GEN-END:variables

    private EdgeWeightedSymbolDigraph ewSymbolDigraph;
    private RedBlackBST<String, Aeroporto> AirportRBST;
    private RedBlackBST<String, Aviao> AirplaneRBST;
    private ArrayList<int[]> listEdges_ShortestPath = new ArrayList<>();
    private ArrayList<int[]> listEdges_DirectPath = new ArrayList<>();
    private ArrayList<int[]> listEdges_EconomicPath = new ArrayList<>();
    private ArrayList<int[]> listEdges_QuickestPath = new ArrayList<>();
    private MapPanel mapPanel;
    
    private static final String SHORTEST = "shortest";
    private static final String DIRECT = "direct";
    private static final String ECONOMIC = "economic";
    private static final String QUICKEST = "quickest";
}
