/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frame;

import classes.Aeroporto;
import classes.Aviao;
import classes.CompanhiaAerea;
import edu.princeton.cs.algs4.BinarySearchST;
import edu.princeton.cs.algs4.RedBlackBST;
import graphs.AirlineConnection;
import graphs.EdgeWeightedSymbolDigraph;
import javax.swing.JOptionPane;

/**
 *
 * @author Modusaleatorios
 */
public class AirportFiltersPanel extends javax.swing.JPanel
{

    /**
     * Creates new form AirportFiltersPanel
     */
    public AirportFiltersPanel()
    {
        initComponents();
        this.tgb_ActiveStatus.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        tgb_ActiveStatus = new javax.swing.JToggleButton();
        lbl_Classification = new javax.swing.JLabel();
        txf_Classification = new javax.swing.JTextField();
        ScrollPane_ListCountries = new javax.swing.JScrollPane();
        lst_Countries = new javax.swing.JList<>();
        lbl_Coordinates = new javax.swing.JLabel();
        lbl_LatitudeMax = new javax.swing.JLabel();
        sld_LatitudeMax = new javax.swing.JSlider();
        txt_LatitudeMax = new javax.swing.JTextField();
        lbl_LatitudeMin = new javax.swing.JLabel();
        sld_LatitudeMin = new javax.swing.JSlider();
        txt_LatitudeMin = new javax.swing.JTextField();
        lbl_LongitudeMax = new javax.swing.JLabel();
        txf_LongitudeMax = new javax.swing.JTextField();
        sld_LongitudeMax = new javax.swing.JSlider();
        lbl_LongitudeMin = new javax.swing.JLabel();
        txf_LongitudeMin = new javax.swing.JTextField();
        sld_LongitudeMin = new javax.swing.JSlider();
        lbl_MinNumberAirplanes = new javax.swing.JLabel();
        txf_MinNumberAirplanes = new javax.swing.JTextField();
        lbl_AirlineCompany = new javax.swing.JLabel();
        cbx_AirlineCompany = new javax.swing.JComboBox<>();
        lbl_ConnectionsToThis = new javax.swing.JLabel();
        txf_ConnectionsToThis = new javax.swing.JTextField();
        lbl_ConnectionsFromThis = new javax.swing.JLabel();
        txf_ConnectionsFromThis = new javax.swing.JTextField();
        separator_AirportFilter = new javax.swing.JSeparator();
        ScrollPane_ListAirports = new javax.swing.JScrollPane();
        lst_Airports = new javax.swing.JList<>();

        setBackground(new java.awt.Color(224, 239, 255));
        setPreferredSize(new java.awt.Dimension(942, 344));

        tgb_ActiveStatus.setText("Status : Active");
        tgb_ActiveStatus.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tgb_ActiveStatusActionPerformed(evt);
            }
        });

        lbl_Classification.setText("Classification higher than");

        txf_Classification.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txf_Classification.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txf_ClassificationActionPerformed(evt);
            }
        });

        lst_Countries.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ScrollPane_ListCountries.setViewportView(lst_Countries);

        lbl_Coordinates.setText("Coordinates");

        lbl_LatitudeMax.setText("Latitude : MAX");

        sld_LatitudeMax.setBackground(new java.awt.Color(224, 239, 255));
        sld_LatitudeMax.setMaximum(180);
        sld_LatitudeMax.setMinimum(-180);
        sld_LatitudeMax.setValue(180);
        sld_LatitudeMax.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                sld_LatitudeMaxMouseDragged(evt);
            }
        });
        sld_LatitudeMax.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                sld_LatitudeMaxMousePressed(evt);
            }
        });
        sld_LatitudeMax.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                sld_LatitudeMaxPropertyChange(evt);
            }
        });

        txt_LatitudeMax.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txt_LatitudeMax.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txt_LatitudeMaxActionPerformed(evt);
            }
        });

        lbl_LatitudeMin.setText("Latitude : MIN");

        sld_LatitudeMin.setBackground(new java.awt.Color(224, 239, 255));
        sld_LatitudeMin.setMaximum(180);
        sld_LatitudeMin.setMinimum(-180);
        sld_LatitudeMin.setValue(-180);
        sld_LatitudeMin.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                sld_LatitudeMinMouseDragged(evt);
            }
        });
        sld_LatitudeMin.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                sld_LatitudeMinMouseClicked(evt);
            }
        });
        sld_LatitudeMin.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                sld_LatitudeMinPropertyChange(evt);
            }
        });

        txt_LatitudeMin.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txt_LatitudeMin.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txt_LatitudeMinActionPerformed(evt);
            }
        });

        lbl_LongitudeMax.setText("Longitude : MAX");

        txf_LongitudeMax.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txf_LongitudeMax.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txf_LongitudeMaxActionPerformed(evt);
            }
        });

        sld_LongitudeMax.setBackground(new java.awt.Color(224, 239, 255));
        sld_LongitudeMax.setMaximum(180);
        sld_LongitudeMax.setMinimum(-180);
        sld_LongitudeMax.setValue(180);
        sld_LongitudeMax.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                sld_LongitudeMaxMouseDragged(evt);
            }
        });
        sld_LongitudeMax.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                sld_LongitudeMaxMouseClicked(evt);
            }
        });
        sld_LongitudeMax.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                sld_LongitudeMaxPropertyChange(evt);
            }
        });

        lbl_LongitudeMin.setText("Longitude : MIN");

        txf_LongitudeMin.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txf_LongitudeMin.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txf_LongitudeMinActionPerformed(evt);
            }
        });

        sld_LongitudeMin.setBackground(new java.awt.Color(224, 239, 255));
        sld_LongitudeMin.setMaximum(180);
        sld_LongitudeMin.setMinimum(-180);
        sld_LongitudeMin.setValue(-180);
        sld_LongitudeMin.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                sld_LongitudeMinMouseDragged(evt);
            }
        });
        sld_LongitudeMin.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                sld_LongitudeMinMouseClicked(evt);
            }
        });
        sld_LongitudeMin.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                sld_LongitudeMinPropertyChange(evt);
            }
        });

        lbl_MinNumberAirplanes.setText("Minimum Number of Airplanes");

        txf_MinNumberAirplanes.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txf_MinNumberAirplanesActionPerformed(evt);
            }
        });

        lbl_AirlineCompany.setText("Airline Company");

        cbx_AirlineCompany.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Item 2", "Item 3", "Item 4" }));
        cbx_AirlineCompany.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbx_AirlineCompanyActionPerformed(evt);
            }
        });

        lbl_ConnectionsToThis.setText("N. of Airlines Connections to this Airport");

        txf_ConnectionsToThis.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txf_ConnectionsToThisActionPerformed(evt);
            }
        });

        lbl_ConnectionsFromThis.setText("N. of Airline Connections from this Airport");

        txf_ConnectionsFromThis.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txf_ConnectionsFromThisActionPerformed(evt);
            }
        });

        lst_Airports.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ScrollPane_ListAirports.setViewportView(lst_Airports);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(separator_AirportFilter, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tgb_ActiveStatus)
                                .addGap(18, 18, 18)
                                .addComponent(lbl_Classification)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txf_Classification, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ScrollPane_ListCountries))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_LongitudeMin)
                            .addComponent(lbl_LongitudeMax)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lbl_LatitudeMax)
                                .addComponent(lbl_LatitudeMin))
                            .addComponent(lbl_Coordinates))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sld_LatitudeMin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                            .addComponent(sld_LongitudeMin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                            .addComponent(sld_LatitudeMax, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(sld_LongitudeMax, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_LatitudeMax, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_LatitudeMin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txf_LongitudeMax, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txf_LongitudeMin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_ConnectionsFromThis)
                                    .addComponent(lbl_ConnectionsToThis))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txf_ConnectionsFromThis, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                                    .addComponent(txf_ConnectionsToThis)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lbl_AirlineCompany)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbx_AirlineCompany, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_MinNumberAirplanes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txf_MinNumberAirplanes, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(ScrollPane_ListAirports))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tgb_ActiveStatus)
                                .addComponent(lbl_Classification)
                                .addComponent(txf_Classification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addComponent(ScrollPane_ListCountries, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lbl_Coordinates)
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(sld_LatitudeMax, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbl_LatitudeMax))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(sld_LatitudeMin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbl_LatitudeMin, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(sld_LongitudeMax, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbl_LongitudeMax, javax.swing.GroupLayout.Alignment.TRAILING)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(txf_MinNumberAirplanes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cbx_AirlineCompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txf_ConnectionsToThis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(txf_ConnectionsFromThis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lbl_ConnectionsFromThis))
                                        .addComponent(sld_LongitudeMin, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(12, 12, 12)
                                    .addComponent(lbl_LongitudeMin)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_LatitudeMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_MinNumberAirplanes))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_LatitudeMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_AirlineCompany))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txf_LongitudeMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_ConnectionsToThis))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txf_LongitudeMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(separator_AirportFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPane_ListAirports, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tgb_ActiveStatusActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tgb_ActiveStatusActionPerformed
    {//GEN-HEADEREND:event_tgb_ActiveStatusActionPerformed
        if (this.tgb_ActiveStatus.isSelected())
        {
            this.tgb_ActiveStatus.setText("Status : Active");
        }
        else
        {
            this.tgb_ActiveStatus.setText("Status : Inactive");
        }
        filterAirports();
    }//GEN-LAST:event_tgb_ActiveStatusActionPerformed

    private void sld_LatitudeMaxPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_sld_LatitudeMaxPropertyChange
    {//GEN-HEADEREND:event_sld_LatitudeMaxPropertyChange
        this.txt_LatitudeMax.setText(String.valueOf(this.sld_LatitudeMax.getValue()));
    }//GEN-LAST:event_sld_LatitudeMaxPropertyChange

    private void sld_LatitudeMaxMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_sld_LatitudeMaxMousePressed
    {//GEN-HEADEREND:event_sld_LatitudeMaxMousePressed
        this.txt_LatitudeMax.setText(String.valueOf(this.sld_LatitudeMax.getValue()));
    }//GEN-LAST:event_sld_LatitudeMaxMousePressed

    private void sld_LatitudeMaxMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_sld_LatitudeMaxMouseDragged
    {//GEN-HEADEREND:event_sld_LatitudeMaxMouseDragged
        if (this.sld_LatitudeMax.getValue() < this.sld_LatitudeMin.getValue())
        {
            this.sld_LatitudeMin.setValue(this.sld_LatitudeMax.getValue());
            this.txt_LatitudeMin.setText(String.valueOf(this.sld_LatitudeMin.getValue()));
        }
        this.txt_LatitudeMax.setText(String.valueOf(this.sld_LatitudeMax.getValue()));
        filterAirports();
    }//GEN-LAST:event_sld_LatitudeMaxMouseDragged

    private void sld_LatitudeMinPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_sld_LatitudeMinPropertyChange
    {//GEN-HEADEREND:event_sld_LatitudeMinPropertyChange
        this.txt_LatitudeMin.setText(String.valueOf(this.sld_LatitudeMin.getValue()));
    }//GEN-LAST:event_sld_LatitudeMinPropertyChange

    private void sld_LatitudeMinMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_sld_LatitudeMinMouseDragged
    {//GEN-HEADEREND:event_sld_LatitudeMinMouseDragged
        if (this.sld_LatitudeMax.getValue() < this.sld_LatitudeMin.getValue())
        {
            this.sld_LatitudeMax.setValue(this.sld_LatitudeMin.getValue());
            this.txt_LatitudeMax.setText(String.valueOf(this.sld_LatitudeMax.getValue()));
        }
        this.txt_LatitudeMin.setText(String.valueOf(this.sld_LatitudeMin.getValue()));
        filterAirports();
    }//GEN-LAST:event_sld_LatitudeMinMouseDragged

    private void sld_LatitudeMinMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_sld_LatitudeMinMouseClicked
    {//GEN-HEADEREND:event_sld_LatitudeMinMouseClicked
        this.txt_LatitudeMin.setText(String.valueOf(this.sld_LatitudeMin.getValue()));
    }//GEN-LAST:event_sld_LatitudeMinMouseClicked

    private void sld_LongitudeMaxPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_sld_LongitudeMaxPropertyChange
    {//GEN-HEADEREND:event_sld_LongitudeMaxPropertyChange
        this.txf_LongitudeMax.setText(String.valueOf(this.sld_LongitudeMax.getValue()));
    }//GEN-LAST:event_sld_LongitudeMaxPropertyChange

    private void sld_LongitudeMaxMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_sld_LongitudeMaxMouseDragged
    {//GEN-HEADEREND:event_sld_LongitudeMaxMouseDragged
        if (this.sld_LongitudeMax.getValue() < this.sld_LongitudeMin.getValue())
        {
            this.sld_LongitudeMin.setValue(this.sld_LongitudeMax.getValue());
            this.txf_LongitudeMin.setText(String.valueOf(this.sld_LongitudeMin.getValue()));
        }
        this.txf_LongitudeMax.setText(String.valueOf(this.sld_LongitudeMax.getValue()));
        filterAirports();
    }//GEN-LAST:event_sld_LongitudeMaxMouseDragged

    private void sld_LongitudeMaxMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_sld_LongitudeMaxMouseClicked
    {//GEN-HEADEREND:event_sld_LongitudeMaxMouseClicked
        this.txf_LongitudeMax.setText(String.valueOf(this.sld_LongitudeMax.getValue()));
    }//GEN-LAST:event_sld_LongitudeMaxMouseClicked

    private void sld_LongitudeMinPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_sld_LongitudeMinPropertyChange
    {//GEN-HEADEREND:event_sld_LongitudeMinPropertyChange
        this.txf_LongitudeMin.setText(String.valueOf(this.sld_LongitudeMin.getValue()));
    }//GEN-LAST:event_sld_LongitudeMinPropertyChange

    private void sld_LongitudeMinMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_sld_LongitudeMinMouseDragged
    {//GEN-HEADEREND:event_sld_LongitudeMinMouseDragged
        if (this.sld_LongitudeMax.getValue() < this.sld_LongitudeMin.getValue())
        {
            this.sld_LongitudeMax.setValue(this.sld_LongitudeMin.getValue());
            this.txf_LongitudeMax.setText(String.valueOf(this.sld_LongitudeMax.getValue()));
        }
        this.txf_LongitudeMin.setText(String.valueOf(this.sld_LongitudeMin.getValue()));
        filterAirports();
    }//GEN-LAST:event_sld_LongitudeMinMouseDragged

    private void sld_LongitudeMinMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_sld_LongitudeMinMouseClicked
    {//GEN-HEADEREND:event_sld_LongitudeMinMouseClicked
        this.txf_LongitudeMin.setText(String.valueOf(this.sld_LongitudeMin.getValue()));
    }//GEN-LAST:event_sld_LongitudeMinMouseClicked

    private void txf_ClassificationActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txf_ClassificationActionPerformed
    {//GEN-HEADEREND:event_txf_ClassificationActionPerformed
        try
        {
            if (!(this.txf_Classification.getText().compareTo("") == 0))
            {
                if (Double.valueOf(txf_Classification.getText()) < 0.0)
                {
                    txf_Classification.setText("0.0");
                }
                if (Double.valueOf(txf_Classification.getText()) > 10.0)
                {
                    txf_Classification.setText("10.0");
                }
            }
            filterAirports();
        } catch (NumberFormatException e)
        {
            this.txf_Classification.setText("");
            JOptionPane.showMessageDialog(null, "You must insert a number between 0.0 and 10.0");
        }
    }//GEN-LAST:event_txf_ClassificationActionPerformed

    private void txt_LatitudeMaxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txt_LatitudeMaxActionPerformed
    {//GEN-HEADEREND:event_txt_LatitudeMaxActionPerformed
        try
        {
            this.sld_LatitudeMax.setValue(Integer.decode(this.txt_LatitudeMax.getText()));
            if (this.sld_LatitudeMax.getValue() < this.sld_LatitudeMin.getValue())
            {
                this.sld_LatitudeMin.setValue(this.sld_LatitudeMax.getValue());
                this.txt_LatitudeMin.setText(String.valueOf(this.sld_LatitudeMin.getValue()));
            }
            filterAirports();
        } catch (NumberFormatException e)
        {
            this.txt_LatitudeMax.setText("180");
            this.sld_LatitudeMax.setValue(180);
            JOptionPane.showMessageDialog(null, "You must insert a number between -180 and 180");
        }
    }//GEN-LAST:event_txt_LatitudeMaxActionPerformed

    private void txt_LatitudeMinActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txt_LatitudeMinActionPerformed
    {//GEN-HEADEREND:event_txt_LatitudeMinActionPerformed
        try
        {
            this.sld_LatitudeMin.setValue(Integer.decode(this.txt_LatitudeMin.getText()));
            if (this.sld_LatitudeMax.getValue() < this.sld_LatitudeMin.getValue())
            {
                this.sld_LatitudeMax.setValue(this.sld_LatitudeMin.getValue());
                this.txt_LatitudeMax.setText(String.valueOf(this.sld_LatitudeMax.getValue()));
            }
            filterAirports();
        } catch (NumberFormatException e)
        {
            this.txt_LatitudeMin.setText("-180");
            this.sld_LatitudeMin.setValue(-180);
            JOptionPane.showMessageDialog(null, "You must insert a number between -180 and 180");
        }
    }//GEN-LAST:event_txt_LatitudeMinActionPerformed

    private void txf_LongitudeMaxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txf_LongitudeMaxActionPerformed
    {//GEN-HEADEREND:event_txf_LongitudeMaxActionPerformed
        try
        {
            this.sld_LongitudeMax.setValue(Integer.decode(this.txf_LongitudeMax.getText()));
            if (this.sld_LongitudeMax.getValue() < this.sld_LongitudeMin.getValue())
            {
                this.sld_LongitudeMin.setValue(this.sld_LongitudeMax.getValue());
                this.txf_LongitudeMin.setText(String.valueOf(this.sld_LongitudeMin.getValue()));
            }
            filterAirports();
        } catch (NumberFormatException e)
        {
            this.txf_LongitudeMax.setText("180");
            this.sld_LongitudeMax.setValue(180);
            JOptionPane.showMessageDialog(null, "You must insert a number between -180 and 180");
        }
    }//GEN-LAST:event_txf_LongitudeMaxActionPerformed

    private void txf_LongitudeMinActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txf_LongitudeMinActionPerformed
    {//GEN-HEADEREND:event_txf_LongitudeMinActionPerformed
        try
        {
            this.sld_LongitudeMin.setValue(Integer.decode(this.txf_LongitudeMin.getText()));
            if (this.sld_LongitudeMax.getValue() < this.sld_LongitudeMin.getValue())
            {
                this.sld_LongitudeMax.setValue(this.sld_LongitudeMin.getValue());
                this.txf_LongitudeMax.setText(String.valueOf(this.sld_LongitudeMax.getValue()));
            }
            filterAirports();
        } catch (NumberFormatException e)
        {
            this.txf_LongitudeMin.setText("-180");
            this.sld_LongitudeMin.setValue(-180);
            JOptionPane.showMessageDialog(null, "You must insert a number between -180 and 180");
        }
    }//GEN-LAST:event_txf_LongitudeMinActionPerformed

    private void txf_MinNumberAirplanesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txf_MinNumberAirplanesActionPerformed
    {//GEN-HEADEREND:event_txf_MinNumberAirplanesActionPerformed
        try
        {
            if (!(this.txf_MinNumberAirplanes.getText().compareTo("") == 0))
            {
                if (Integer.valueOf(txf_MinNumberAirplanes.getText()) < 1)
                {
                    txf_MinNumberAirplanes.setText("");
                }
            }
            filterAirports();
        } catch (NumberFormatException e)
        {
            this.txf_MinNumberAirplanes.setText("");
            JOptionPane.showMessageDialog(null, "You must insert a number bigger than 0");
        }
    }//GEN-LAST:event_txf_MinNumberAirplanesActionPerformed

    private void txf_ConnectionsToThisActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txf_ConnectionsToThisActionPerformed
    {//GEN-HEADEREND:event_txf_ConnectionsToThisActionPerformed
        try
        {
            if (!(this.txf_ConnectionsToThis.getText().compareTo("") == 0))
            {
                if (Integer.valueOf(txf_ConnectionsToThis.getText()) < 1)
                {
                    txf_ConnectionsToThis.setText("");
                }
            }
            filterAirports();
        } catch (NumberFormatException e)
        {
            this.txf_ConnectionsToThis.setText("");
            JOptionPane.showMessageDialog(null, "You must insert a number bigger than 0");
        }
    }//GEN-LAST:event_txf_ConnectionsToThisActionPerformed

    private void txf_ConnectionsFromThisActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txf_ConnectionsFromThisActionPerformed
    {//GEN-HEADEREND:event_txf_ConnectionsFromThisActionPerformed
        try
        {
            if (!(this.txf_ConnectionsFromThis.getText().compareTo("") == 0))
            {
                if (Integer.valueOf(txf_ConnectionsFromThis.getText()) < 1)
                {
                    txf_ConnectionsFromThis.setText("");
                }
            }
            filterAirports();
        } catch (NumberFormatException e)
        {
            this.txf_ConnectionsFromThis.setText("");
            JOptionPane.showMessageDialog(null, "You must insert a number bigger than 0");
        }
    }//GEN-LAST:event_txf_ConnectionsFromThisActionPerformed

    private void cbx_AirlineCompanyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbx_AirlineCompanyActionPerformed
    {//GEN-HEADEREND:event_cbx_AirlineCompanyActionPerformed
        filterAirports();
    }//GEN-LAST:event_cbx_AirlineCompanyActionPerformed

    public void setExtraClasses(RedBlackBST<String, Aeroporto> airportRBST, EdgeWeightedSymbolDigraph ewsDigraph, BinarySearchST<String, CompanhiaAerea> aCompaniesBST)
    {
        this.airportRBST = airportRBST;
        this.ewSymbolDigraph = ewsDigraph;
        this.airlineCompanyBSST = aCompaniesBST;
        
        BinarySearchST<String, String> countriesBST = new BinarySearchST<>();
        for (String airportCode : this.airportRBST.keys())
        {
            if (!(countriesBST.contains(this.airportRBST.get(airportCode).getMyCidade().getPais())))
            {
                countriesBST.put(this.airportRBST.get(airportCode).getMyCidade().getPais(), this.airportRBST.get(airportCode).getMyCidade().getContinente());
            }
        }
        String[] listData = new String[countriesBST.size()];
        for (int i = 0; i < countriesBST.size(); i++)
        {
            listData[i] = countriesBST.select(i) + ", " + countriesBST.get(countriesBST.select(i));
        }
        this.lst_Countries.setListData(listData);
        
        this.cbx_AirlineCompany.removeAllItems();
        this.cbx_AirlineCompany.addItem("All");
        for (String airlineCompanyIter : this.airlineCompanyBSST.keys())
        {
            this.cbx_AirlineCompany.addItem(airlineCompanyIter);
        }
        this.cbx_AirlineCompany.setSelectedIndex(0);
        
        filterAirports();
    }
    
    public void filterAirports()
    {
        RedBlackBST<String, Aeroporto> auxAirportRBST = new RedBlackBST<>();
        
        for (String airportCodeIter : this.airportRBST.keys())
        {
            Aeroporto airport = this.airportRBST.get(airportCodeIter);
            
            if (filterActiveStatus(airport) && filterClassification(airport) && filterLatitude(airport) && filterLongitude(airport) && filterMinNumberAirplanes(airport) && filterAirlineCompany(airport) && filterMinAirlineConnectionsTo(airport) && filterMinAirlineConnectionsFrom(airport))
            {
                System.out.println("Anytime?");
                auxAirportRBST.put(airportCodeIter, airport);
            }
        }
        
        setListOfAirports(auxAirportRBST);
    }
    
    private void setListOfAirports(RedBlackBST<String, Aeroporto> airportRedBlackST)
    {
        String[] listData = new String[airportRedBlackST.size()];
        int i = 0;
        
        for (String airportCodeIter : airportRedBlackST.keys())
        {
            listData[i] = airportCodeIter + "   - " + airportRedBlackST.get(airportCodeIter).getNome();
            i++;
        }
        this.lst_Airports.setListData(listData);
    }
    
    private boolean filterActiveStatus(Aeroporto airport)
    {
        if (this.tgb_ActiveStatus.isSelected() == airport.getActiveStatus())
        {
            return true;
        }
        System.out.println("frame.AirportFiltersPanel.filterActiveStatus()");
        return false;
    }
    
    private boolean filterClassification(Aeroporto airport)
    {
        if ((this.txf_Classification.getText().compareTo("") == 0) || (Double.valueOf(this.txf_Classification.getText()) <= airport.getClassificacao()))
        {
            return true;
        }
        System.out.println("frame.AirportFiltersPanel.filterClassification()");
        return false;
    }
    
    private boolean filterLatitude(Aeroporto airport)
    {
        if ((Double.valueOf(this.txt_LatitudeMax.getText()) >= airport.getMyCidade().getLatitude()) && (Double.valueOf(this.txt_LatitudeMin.getText()) <= airport.getMyCidade().getLatitude()))
        {
            return true;
        }
        if (Double.valueOf(this.txt_LatitudeMax.getText()) < 0.0)
        {
            if ((Double.valueOf(this.txt_LatitudeMax.getText()) >= airport.getMyCidade().getLatitude()) && (Double.valueOf(this.txt_LatitudeMin.getText()) - 0.999999 <= airport.getMyCidade().getLatitude()))
            {
                return true;
            }
        }
        if (Double.valueOf(this.txt_LatitudeMin.getText()) > 0.0)
        {
            if ((Double.valueOf(this.txt_LatitudeMax.getText()) + 0.999999 >= airport.getMyCidade().getLatitude()) && (Double.valueOf(this.txt_LatitudeMin.getText()) <= airport.getMyCidade().getLatitude()))
            {
                return true;
            }
        }
        if (Double.valueOf(this.txt_LatitudeMin.getText()) == 0.0)
        {
            if ((Double.valueOf(this.txt_LatitudeMax.getText()) + 0.999999 >= airport.getMyCidade().getLatitude()) && (Double.valueOf(this.txt_LatitudeMin.getText()) - 0.999999 <= airport.getMyCidade().getLatitude()))
            {
                return true;
            }
        }
        System.out.println("frame.AirportFiltersPanel.filterLatitude()");
        return false;
    }
    
    private boolean filterLongitude(Aeroporto airport)
    {
        if ((Double.valueOf(this.txf_LongitudeMax.getText()) >= airport.getMyCidade().getLongitude()) && (Double.valueOf(this.txf_LongitudeMin.getText()) <= airport.getMyCidade().getLongitude()))
        {
            return true;
        }
        if (Double.valueOf(this.txf_LongitudeMax.getText()) < 0.0)
        {
            if ((Double.valueOf(this.txf_LongitudeMax.getText()) >= airport.getMyCidade().getLongitude()) && (Double.valueOf(this.txf_LongitudeMin.getText()) - 0.999999 <= airport.getMyCidade().getLongitude()))
            {
                return true;
            }
        }
        if (Double.valueOf(this.txf_LongitudeMin.getText()) > 0.0)
        {
            if ((Double.valueOf(this.txf_LongitudeMax.getText()) + 0.999999 >= airport.getMyCidade().getLongitude()) && (Double.valueOf(this.txf_LongitudeMin.getText()) <= airport.getMyCidade().getLongitude()))
            {
                return true;
            }
        }
        if (Double.valueOf(this.txf_LongitudeMin.getText()) == 0.0)
        {
            if ((Double.valueOf(this.txf_LongitudeMax.getText()) + 0.999999 >= airport.getMyCidade().getLongitude()) && (Double.valueOf(this.txf_LongitudeMin.getText()) - 0.999999 <= airport.getMyCidade().getLongitude()))
            {
                return true;
            }
        }
        System.out.println("frame.AirportFiltersPanel.filterLongitude()");
        return false;
    }
    
    private boolean filterMinNumberAirplanes(Aeroporto airport)
    {
        if ((this.txf_MinNumberAirplanes.getText().compareTo("") == 0) || (Integer.decode(this.txf_MinNumberAirplanes.getText()) <= airport.getListagemAvioes().size()))
        {
            return true;
        }
        System.out.println("frame.AirportFiltersPanel.filterMinNumberAirplanes()");
        return false;
    }
    
    private boolean filterAirlineCompany(Aeroporto airport)
    {
        try
        {
            if (((String)this.cbx_AirlineCompany.getSelectedItem()).compareTo("All") == 0)
            {
                return true;
            }
            RedBlackBST<String, Aviao> airplaneRBST = airport.getListagemAvioes();
            for (String aiplaneCodeIter : airplaneRBST.keys())
            {
                if (((String)this.cbx_AirlineCompany.getSelectedItem()).compareTo(airplaneRBST.get(aiplaneCodeIter).getMyCompanhiaAerea().getNome()) == 0)
                {
                    return true;
                }
            }
            System.out.println("frame.AirportFiltersPanel.filterAirlineCompany()");
            return false;
        } catch (NullPointerException e)
        {
            return true;
        }
    }
    
    private boolean filterMinAirlineConnectionsTo(Aeroporto airport)
    {
        if ((this.txf_ConnectionsToThis.getText().compareTo("") == 0) || (Integer.decode(this.txf_ConnectionsToThis.getText()) <= airport.getListAirlineConnectionsToThis(this.ewSymbolDigraph).size()))
        {
            return true;
        }
        System.out.println("frame.AirportFiltersPanel.filterMinAirlineConnectionsTo()");
        return false;
    }
    
    private boolean filterMinAirlineConnectionsFrom(Aeroporto airport)
    {
        if ((this.txf_ConnectionsFromThis.getText().compareTo("") == 0) || (Integer.decode(this.txf_ConnectionsFromThis.getText()) <= airport.getListAirlineConnectionsFromThis(this.ewSymbolDigraph).size()))
        {
            return true;
        }
        System.out.println("frame.AirportFiltersPanel.filterMinAirlineConnectionsFrom()");
        return false;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPane_ListAirports;
    private javax.swing.JScrollPane ScrollPane_ListCountries;
    private javax.swing.JComboBox<String> cbx_AirlineCompany;
    private javax.swing.JLabel lbl_AirlineCompany;
    private javax.swing.JLabel lbl_Classification;
    private javax.swing.JLabel lbl_ConnectionsFromThis;
    private javax.swing.JLabel lbl_ConnectionsToThis;
    private javax.swing.JLabel lbl_Coordinates;
    private javax.swing.JLabel lbl_LatitudeMax;
    private javax.swing.JLabel lbl_LatitudeMin;
    private javax.swing.JLabel lbl_LongitudeMax;
    private javax.swing.JLabel lbl_LongitudeMin;
    private javax.swing.JLabel lbl_MinNumberAirplanes;
    private javax.swing.JList<String> lst_Airports;
    private javax.swing.JList<String> lst_Countries;
    private javax.swing.JSeparator separator_AirportFilter;
    private javax.swing.JSlider sld_LatitudeMax;
    private javax.swing.JSlider sld_LatitudeMin;
    private javax.swing.JSlider sld_LongitudeMax;
    private javax.swing.JSlider sld_LongitudeMin;
    private javax.swing.JToggleButton tgb_ActiveStatus;
    private javax.swing.JTextField txf_Classification;
    private javax.swing.JTextField txf_ConnectionsFromThis;
    private javax.swing.JTextField txf_ConnectionsToThis;
    private javax.swing.JTextField txf_LongitudeMax;
    private javax.swing.JTextField txf_LongitudeMin;
    private javax.swing.JTextField txf_MinNumberAirplanes;
    private javax.swing.JTextField txt_LatitudeMax;
    private javax.swing.JTextField txt_LatitudeMin;
    // End of variables declaration//GEN-END:variables

    private RedBlackBST<String, Aeroporto> airportRBST;
    private EdgeWeightedSymbolDigraph ewSymbolDigraph;
    private BinarySearchST<String, CompanhiaAerea> airlineCompanyBSST;
}
