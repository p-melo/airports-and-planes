/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frame;

import edu.princeton.cs.algs4.RedBlackBST;
import classes.*;
import graphs.*;
import managers.*;

/**
 *
 * @author Modusaleatorios
 */
public class MainFrame extends javax.swing.JFrame
{
    /**
     * Creates new form MainFrame
     */
    public MainFrame()
    {
        initComponents();
        
        
        Ficheiros.lerFicheiro("airplanes.txt", this.baseDados);
        Ficheiros.lerFicheiro("airports.txt", this.baseDados);
        String fileName = ".//src//database//graph.txt";
        this.ewSymbolDigraph = new EdgeWeightedSymbolDigraph(fileName, ";");
        for (AirlineConnection acIter : ewSymbolDigraph.getEdgeWeightedDirectedGraph().edges())
        {
            this.baseDados.getAeroporto(ewSymbolDigraph.nameOf(acIter.from())).addAirlineConnection(acIter, this.ewSymbolDigraph);
            this.baseDados.getAeroporto(ewSymbolDigraph.nameOf(acIter.to())).addAirlineConnection(acIter, this.ewSymbolDigraph);
        }
        
        
        this.graphConexPanel1.setConexBoard(this.ewSymbolDigraph);
        this.graphShortestPathPanel1.setExtraClasses(this.ewSymbolDigraph, baseDados.getRBSTAeroportos(), baseDados.getRBSTAvioes(), mapPanel1);
        this.airportFiltersPanel1.setExtraClasses(baseDados.getRBSTAeroportos(), this.ewSymbolDigraph, baseDados.getCompanhiasAereasBSST());
        
        this.airportPropertiesPanel1.setEdgeWeightedSymbolDigraph(this.ewSymbolDigraph);
        this.airportPropertiesPanel1.setConexPanel(this.graphConexPanel1);
        this.airportPropertiesPanel1.setShortestPathPanel(this.graphShortestPathPanel1);
        
        this.mapPanel1.placeAirportOnMap(baseDados.getRBSTAeroportos());
        
        this.airplanePropertiesPanel1.setVisible(false);
        
        this.rdbAirports.setSelected(true);
        
        RedBlackBST<String, Aeroporto> aeroportosRBST = baseDados.getRBSTAeroportos();
        this.cbxAirportAirplane.removeAllItems();
        for (String airportCode : aeroportosRBST.keys())
        {
            this.cbxAirportAirplane.addItem(airportCode + " - " + aeroportosRBST.get(airportCode).getNome());
        }
        this.cbxAirportAirplane.setSelectedIndex(0);
        
        this.txtDate.setText(data.getTime() + "  " + data);
        
        this.ckb_NorthAmerica.setSelected(true);
        this.ckb_SouthAmerica.setSelected(true);
        this.ckb_Europe.setSelected(true);
        this.ckb_Africa.setSelected(true);
        this.ckb_Asia.setSelected(true);
        this.ckb_Oceania.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btgAirportsAirplanes = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        txtDate = new javax.swing.JTextField();
        btnAdvanceDay = new javax.swing.JButton();
        btnAdvanceHour = new javax.swing.JButton();
        rdbAirports = new javax.swing.JRadioButton();
        rdbAirplanes = new javax.swing.JRadioButton();
        cbxAirportAirplane = new javax.swing.JComboBox<>();
        jLayeredPane_AirportsAirplanes = new javax.swing.JLayeredPane();
        airportPropertiesPanel1 = new frame.AirportPropertiesPanel();
        airplanePropertiesPanel1 = new frame.AirplanePropertiesPanel();
        continentsPanel = new javax.swing.JPanel();
        ckb_NorthAmerica = new javax.swing.JCheckBox();
        ckb_SouthAmerica = new javax.swing.JCheckBox();
        ckb_Europe = new javax.swing.JCheckBox();
        ckb_Africa = new javax.swing.JCheckBox();
        ckb_Asia = new javax.swing.JCheckBox();
        ckb_Oceania = new javax.swing.JCheckBox();
        airportTabbedPane = new javax.swing.JTabbedPane();
        graphConexPanel1 = new frame.GraphConexPanel();
        graphShortestPathPanel1 = new frame.GraphShortestPathPanel();
        airportFiltersPanel1 = new frame.AirportFiltersPanel();
        mapPanel1 = new frame.MapPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItem_Open = new javax.swing.JMenuItem();
        menuItem_Save = new javax.swing.JMenuItem();
        menuItem_SaveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuItem_Exit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Flights and Airplanes");

        jPanel1.setBackground(new java.awt.Color(229, 242, 255));

        txtDate.setEditable(false);
        txtDate.setBackground(new java.awt.Color(219, 237, 255));
        txtDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnAdvanceDay.setBackground(new java.awt.Color(250, 250, 250));
        btnAdvanceDay.setText("day >>");
        btnAdvanceDay.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAdvanceDayActionPerformed(evt);
            }
        });

        btnAdvanceHour.setBackground(new java.awt.Color(250, 250, 250));
        btnAdvanceHour.setText("hour >>");
        btnAdvanceHour.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAdvanceHourActionPerformed(evt);
            }
        });

        rdbAirports.setBackground(new java.awt.Color(229, 242, 255));
        btgAirportsAirplanes.add(rdbAirports);
        rdbAirports.setText("Airports");
        rdbAirports.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rdbAirportsActionPerformed(evt);
            }
        });

        rdbAirplanes.setBackground(new java.awt.Color(229, 242, 255));
        btgAirportsAirplanes.add(rdbAirplanes);
        rdbAirplanes.setText("Airplanes");
        rdbAirplanes.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rdbAirplanesActionPerformed(evt);
            }
        });

        cbxAirportAirplane.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxAirportAirplane.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbxAirportAirplaneActionPerformed(evt);
            }
        });

        jLayeredPane_AirportsAirplanes.setPreferredSize(new java.awt.Dimension(380, 390));
        jLayeredPane_AirportsAirplanes.setLayout(new javax.swing.OverlayLayout(jLayeredPane_AirportsAirplanes));
        jLayeredPane_AirportsAirplanes.add(airportPropertiesPanel1);
        jLayeredPane_AirportsAirplanes.add(airplanePropertiesPanel1);

        continentsPanel.setBackground(new java.awt.Color(229, 242, 255));
        continentsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Continents"));

        ckb_NorthAmerica.setBackground(new java.awt.Color(229, 242, 255));
        ckb_NorthAmerica.setText("North America");
        ckb_NorthAmerica.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ckb_NorthAmericaActionPerformed(evt);
            }
        });

        ckb_SouthAmerica.setBackground(new java.awt.Color(229, 242, 255));
        ckb_SouthAmerica.setText("South America");
        ckb_SouthAmerica.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ckb_SouthAmericaActionPerformed(evt);
            }
        });

        ckb_Europe.setBackground(new java.awt.Color(229, 242, 255));
        ckb_Europe.setText("Europe");
        ckb_Europe.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ckb_EuropeActionPerformed(evt);
            }
        });

        ckb_Africa.setBackground(new java.awt.Color(229, 242, 255));
        ckb_Africa.setText("Africa");
        ckb_Africa.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ckb_AfricaActionPerformed(evt);
            }
        });

        ckb_Asia.setBackground(new java.awt.Color(229, 242, 255));
        ckb_Asia.setText("Asia");
        ckb_Asia.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ckb_AsiaActionPerformed(evt);
            }
        });

        ckb_Oceania.setBackground(new java.awt.Color(229, 242, 255));
        ckb_Oceania.setText("Oceania");
        ckb_Oceania.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ckb_OceaniaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout continentsPanelLayout = new javax.swing.GroupLayout(continentsPanel);
        continentsPanel.setLayout(continentsPanelLayout);
        continentsPanelLayout.setHorizontalGroup(
            continentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(continentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(continentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ckb_SouthAmerica)
                    .addComponent(ckb_NorthAmerica))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(continentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ckb_Africa)
                    .addComponent(ckb_Europe))
                .addGap(64, 64, 64)
                .addGroup(continentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ckb_Oceania)
                    .addComponent(ckb_Asia))
                .addContainerGap())
        );
        continentsPanelLayout.setVerticalGroup(
            continentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, continentsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(continentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckb_NorthAmerica)
                    .addComponent(ckb_Asia)
                    .addComponent(ckb_Europe))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(continentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckb_SouthAmerica)
                    .addComponent(ckb_Oceania)
                    .addComponent(ckb_Africa))
                .addContainerGap())
        );

        airportTabbedPane.addTab("Connected", graphConexPanel1);
        airportTabbedPane.addTab("Shortest Path", graphShortestPathPanel1);
        airportTabbedPane.addTab("Airport Filters", airportFiltersPanel1);

        mapPanel1.setPreferredSize(new java.awt.Dimension(720, 360));

        javax.swing.GroupLayout mapPanel1Layout = new javax.swing.GroupLayout(mapPanel1);
        mapPanel1.setLayout(mapPanel1Layout);
        mapPanel1Layout.setHorizontalGroup(
            mapPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
        );
        mapPanel1Layout.setVerticalGroup(
            mapPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(airportTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 942, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(mapPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(continentsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbxAirportAirplane, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rdbAirports)
                        .addGap(18, 18, 18)
                        .addComponent(rdbAirplanes))
                    .addComponent(jLayeredPane_AirportsAirplanes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtDate)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAdvanceHour, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdvanceDay, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdvanceDay)
                            .addComponent(btnAdvanceHour))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 164, Short.MAX_VALUE)
                        .addComponent(continentsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdbAirports)
                            .addComponent(rdbAirplanes))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxAirportAirplane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(mapPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLayeredPane_AirportsAirplanes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(airportTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        menuFile.setText("File");

        menuItem_Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuItem_Open.setText("Open");
        menuFile.add(menuItem_Open);

        menuItem_Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuItem_Save.setText("Save");
        menuFile.add(menuItem_Save);

        menuItem_SaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        menuItem_SaveAs.setText("Save As...");
        menuFile.add(menuItem_SaveAs);
        menuFile.add(jSeparator1);

        menuItem_Exit.setText("Exit");
        menuFile.add(menuItem_Exit);

        jMenuBar1.add(menuFile);

        menuEdit.setText("Edit");
        jMenuBar1.add(menuEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void btnAdvanceDayActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAdvanceDayActionPerformed
    {//GEN-HEADEREND:event_btnAdvanceDayActionPerformed
        data.incrementDate();
        txtDate.setText(data.getTime() + "  " + data);
    }//GEN-LAST:event_btnAdvanceDayActionPerformed

    private void btnAdvanceHourActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAdvanceHourActionPerformed
    {//GEN-HEADEREND:event_btnAdvanceHourActionPerformed
        data.incrementHour();
        txtDate.setText(data.getTime() + "  " + data);
    }//GEN-LAST:event_btnAdvanceHourActionPerformed

    private void cbxAirportAirplaneActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbxAirportAirplaneActionPerformed
    {//GEN-HEADEREND:event_cbxAirportAirplaneActionPerformed
        Integer i = cbxAirportAirplane.getSelectedIndex();
        
        if (rdbAirports.isSelected())
        {
            RedBlackBST<String, Aeroporto> aeroportosRBST = baseDados.getRBSTAeroportos();
            
            if (i < 0){i = 0;}
            String airport = aeroportosRBST.select(i);

            airportPropertiesPanel1.setAirport(aeroportosRBST.get(airport));
        }
        else if (rdbAirplanes.isSelected())
        {
            RedBlackBST<String, Aviao> avioesRBST = baseDados.getRBSTAvioes();
            
            if (i < 0){i = 0;}
            String aviao = avioesRBST.select(i);
            Aeroporto aeroporto = (Aeroporto) baseDados.getRBSTAeroportos().get(avioesRBST.get(aviao).getMyAeroporto());
            
            airplanePropertiesPanel1.setAirplane(avioesRBST.get(aviao), aeroporto);
        }
    }//GEN-LAST:event_cbxAirportAirplaneActionPerformed

    private void rdbAirportsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdbAirportsActionPerformed
    {//GEN-HEADEREND:event_rdbAirportsActionPerformed
        airportPropertiesPanel1.setVisible(true);
        airplanePropertiesPanel1.setVisible(false);
        
        System.out.println(airportPropertiesPanel1.getX() + ", " + airportPropertiesPanel1.getY());
        
        RedBlackBST<String, Aeroporto> aeroportosRBST = baseDados.getRBSTAeroportos();

        this.cbxAirportAirplane.removeAllItems();
        for (String airportCode : aeroportosRBST.keys())
        {
            this.cbxAirportAirplane.addItem(airportCode + " - " + aeroportosRBST.get(airportCode).getNome());
        }
        this.cbxAirportAirplane.setSelectedIndex(0);
    }//GEN-LAST:event_rdbAirportsActionPerformed

    private void rdbAirplanesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdbAirplanesActionPerformed
    {//GEN-HEADEREND:event_rdbAirplanesActionPerformed
        airportPropertiesPanel1.setVisible(false);
        airplanePropertiesPanel1.setVisible(true);
        
        RedBlackBST<String, Aviao> avioesRBST = baseDados.getRBSTAvioes();

        this.cbxAirportAirplane.removeAllItems();
        for (String airplaneCode : avioesRBST.keys())
        {
            this.cbxAirportAirplane.addItem(airplaneCode + " - " + avioesRBST.get(airplaneCode).getMyCompanhiaAerea().getNome() + " (" + avioesRBST.get(airplaneCode).getMyModeloAviao().getNome() + ")");
        }
        this.cbxAirportAirplane.setSelectedIndex(0);
    }//GEN-LAST:event_rdbAirplanesActionPerformed

    private void ckb_NorthAmericaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ckb_NorthAmericaActionPerformed
    {//GEN-HEADEREND:event_ckb_NorthAmericaActionPerformed
        setAirportActiveStatusByContinent(this.ckb_NorthAmerica.isSelected(), "North America");
        this.graphShortestPathPanel1.setShortestPathConnections();
        this.graphConexPanel1.setConexBoard(this.ewSymbolDigraph);
        this.airportFiltersPanel1.setExtraClasses(baseDados.getRBSTAeroportos(), this.ewSymbolDigraph, baseDados.getCompanhiasAereasBSST());
    }//GEN-LAST:event_ckb_NorthAmericaActionPerformed

    private void ckb_SouthAmericaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ckb_SouthAmericaActionPerformed
    {//GEN-HEADEREND:event_ckb_SouthAmericaActionPerformed
        setAirportActiveStatusByContinent(this.ckb_SouthAmerica.isSelected(), "South America");
        this.graphShortestPathPanel1.setShortestPathConnections();
        this.graphConexPanel1.setConexBoard(this.ewSymbolDigraph);
        this.airportFiltersPanel1.setExtraClasses(baseDados.getRBSTAeroportos(), this.ewSymbolDigraph, baseDados.getCompanhiasAereasBSST());
    }//GEN-LAST:event_ckb_SouthAmericaActionPerformed

    private void ckb_EuropeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ckb_EuropeActionPerformed
    {//GEN-HEADEREND:event_ckb_EuropeActionPerformed
        setAirportActiveStatusByContinent(this.ckb_Europe.isSelected(), "Europe");
        this.graphShortestPathPanel1.setShortestPathConnections();
        this.graphConexPanel1.setConexBoard(this.ewSymbolDigraph);
        this.airportFiltersPanel1.setExtraClasses(baseDados.getRBSTAeroportos(), this.ewSymbolDigraph, baseDados.getCompanhiasAereasBSST());
    }//GEN-LAST:event_ckb_EuropeActionPerformed

    private void ckb_AfricaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ckb_AfricaActionPerformed
    {//GEN-HEADEREND:event_ckb_AfricaActionPerformed
        setAirportActiveStatusByContinent(this.ckb_Africa.isSelected(), "Africa");
        this.graphShortestPathPanel1.setShortestPathConnections();
        this.graphConexPanel1.setConexBoard(this.ewSymbolDigraph);
        this.airportFiltersPanel1.setExtraClasses(baseDados.getRBSTAeroportos(), this.ewSymbolDigraph, baseDados.getCompanhiasAereasBSST());
    }//GEN-LAST:event_ckb_AfricaActionPerformed

    private void ckb_AsiaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ckb_AsiaActionPerformed
    {//GEN-HEADEREND:event_ckb_AsiaActionPerformed
        setAirportActiveStatusByContinent(this.ckb_Asia.isSelected(), "Asia");
        this.graphShortestPathPanel1.setShortestPathConnections();
        this.graphConexPanel1.setConexBoard(this.ewSymbolDigraph);
        this.airportFiltersPanel1.setExtraClasses(baseDados.getRBSTAeroportos(), this.ewSymbolDigraph, baseDados.getCompanhiasAereasBSST());
    }//GEN-LAST:event_ckb_AsiaActionPerformed

    private void ckb_OceaniaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ckb_OceaniaActionPerformed
    {//GEN-HEADEREND:event_ckb_OceaniaActionPerformed
        setAirportActiveStatusByContinent(this.ckb_Oceania.isSelected(), "Oceania");
        this.graphShortestPathPanel1.setShortestPathConnections();
        this.graphConexPanel1.setConexBoard(this.ewSymbolDigraph);
        this.airportFiltersPanel1.setExtraClasses(baseDados.getRBSTAeroportos(), this.ewSymbolDigraph, baseDados.getCompanhiasAereasBSST());
    }//GEN-LAST:event_ckb_OceaniaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Windows".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private frame.AirplanePropertiesPanel airplanePropertiesPanel1;
    private frame.AirportFiltersPanel airportFiltersPanel1;
    private frame.AirportPropertiesPanel airportPropertiesPanel1;
    private javax.swing.JTabbedPane airportTabbedPane;
    private javax.swing.ButtonGroup btgAirportsAirplanes;
    private javax.swing.JButton btnAdvanceDay;
    private javax.swing.JButton btnAdvanceHour;
    private javax.swing.JComboBox<String> cbxAirportAirplane;
    private javax.swing.JCheckBox ckb_Africa;
    private javax.swing.JCheckBox ckb_Asia;
    private javax.swing.JCheckBox ckb_Europe;
    private javax.swing.JCheckBox ckb_NorthAmerica;
    private javax.swing.JCheckBox ckb_Oceania;
    private javax.swing.JCheckBox ckb_SouthAmerica;
    private javax.swing.JPanel continentsPanel;
    private frame.GraphConexPanel graphConexPanel1;
    private frame.GraphShortestPathPanel graphShortestPathPanel1;
    private javax.swing.JLayeredPane jLayeredPane_AirportsAirplanes;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private frame.MapPanel mapPanel1;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuItem_Exit;
    private javax.swing.JMenuItem menuItem_Open;
    private javax.swing.JMenuItem menuItem_Save;
    private javax.swing.JMenuItem menuItem_SaveAs;
    private javax.swing.JRadioButton rdbAirplanes;
    private javax.swing.JRadioButton rdbAirports;
    private javax.swing.JTextField txtDate;
    // End of variables declaration//GEN-END:variables

    private CalendarDate data = new CalendarDate(1, 1, 2016);
    private BD baseDados = new BD();
    private EdgeWeightedSymbolDigraph ewSymbolDigraph;
    
    private void setAirportActiveStatusByContinent(boolean activeStatus, String continent)
    {
        RedBlackBST<String, Aeroporto> airportRBST = baseDados.getRBSTAeroportos();
        
        for (String airportCodeIter : airportRBST.keys())
        {
            if (airportRBST.get(airportCodeIter).getMyCidade().getContinente().compareTo(continent) == 0)
            {
                airportRBST.get(airportCodeIter).setActiveStatus(activeStatus);
                if (this.airportPropertiesPanel1.getAirportCode().compareTo(airportRBST.get(airportCodeIter).getIdAeroporto()) == 0)
                {
                    this.airportPropertiesPanel1.setActiveStatus(activeStatus);
                }
                
                for (AirlineConnection edgeIter : this.ewSymbolDigraph.getEdgeWeightedDirectedGraph().edges())
                {
                    if (edgeIter.from() == this.ewSymbolDigraph.indexOf(airportCodeIter))
                    {
                        edgeIter.setActiveStatus(activeStatus);
                    }
                    if (edgeIter.to() == this.ewSymbolDigraph.indexOf(airportCodeIter))
                    {
                        edgeIter.setActiveStatus(activeStatus);
                    }
                }
            }
        }
    }
}
